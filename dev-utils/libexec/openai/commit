#!/usr/bin/env ruby
#
# Summary: Create a commit whose message is suggested by the OpenAI API
#
# Usage: {cmd}

require 'erb'
require 'json'
require 'net/http'

# contains methods to be used from the ERB template
class Repository
  attr_reader :title, :diff

  def initialize(title, diff)
    @title = title
    @diff = diff
  end

  def get_binding
    binding
  end
end

# get the title preset from CLI arguments
title = ARGV.join(" ")

# obtain information from git
diff = `git diff --cached`

# create prompt from the ERB template
template = ERB.new(File.read(File.join(ENV["_DEV_ROOT"], "libexec/openai/prompts/commit.txt.erb")))
prompt = template.result(Repository.new(title, diff).get_binding)

# call the OpenAI completions API with the prompt
response = Net::HTTP.post(
  URI("https://api.openai.com/v1/completions"),
  {
    prompt: prompt,
    temperature: 0,
    max_tokens: 500,
    model: "text-davinci-003",
  }.to_json,
  {
    "Content-Type" => "application/json",
    "Authorization" => "Bearer #{ENV["OPENAI_API_KEY"]}",
  },
)

# parse diff explanation from response
generated_message = JSON.parse(response.body).dig("choices", 0, "text")

# commit with the generated message as a preset
system("git commit --edit -m \"#{generated_message.gsub(/"/, '\\"')}\" ")