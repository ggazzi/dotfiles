#+title: Doom Emacs configuration
#+author: Guilherme Grochau Azzi
#+property: header-args:emacs-lisp :tangle yes :comments link
#+property: header-args:elisp :exports code
#+property: header-args:shell :tangle no setup.sh
#+property: header-args :tangle no :results silent :eval no-export
#+startup: fold

* Introduction

This is my n-th restart of my emacs config.

** How does this config work?

This is a literate configuration, that is, code is interspersed with text.
The structure of this document should be readable by humans.
Pieces of code are then weaved together into the appropriate source files, resulting in a functional emacs configuration.

Since this is a Doom Emacs config, it involves three files:

- =init.el=: imports the Doom Emacs configuration modules.
  Its structure and most of its content is contained in its [[#doom-modules][own section]].
- =packages.el=: declares packages that should be installed by Doom's package management system.
  It is also mostly contained in its [[#package-loading][own section]].
- =config.el=: contains the bulk of the config and is loaded last.

The weaving/tangling itself is supported by Doom Emacs's [[https://github.com/hlissner/doom-emacs/blob/develop/modules/config/literate/README.org][=literate=]] module, generating the Emacs configuration from the =$DOOM_DIR/config.org= file instead of the aforementioned three files.

All =emacs-lisp= code blocks are tangled to =config.el= unless otherwise specified.
This can be overridden by setting the header option ~:tangle "destination/file.el"~ to write to another file, or ~:tangle no~ to avoid tangling this code block.

Moreover, blocks can be named and then weaved into other blocks using a [[https://orgmode.org/manual/Noweb-Reference-Syntax.html][noweb-style syntax]].
The named block should have the option ~:tangle no~ and be preceded by a line with ~#+name: BLOCK-NAME~.
Then it can be weaved into another code block that contains ~<<BLOCK-NAME>>~, as long as the option ~:noweb no-export~ is given.
This ensures that the weaving takes place when tangling code, but not when exporting the whole document as a PDF or HTML.

Most code blocks in this document are indeed tangled directly into the =config.el= file.
The structure of =init.el= is defined by a single code block in the [[#doom-modules][section on Doom modules]].
Finally, the content of =packages.el= is distributed throughout the configuration is blocks with the appropriate ~:tangle~ option, so that the loading and configuration of a package are close together.

Since we are already talking about literate programming and named blocks, we might as well provide the named block here for importing the ~literate~ module.
It will be weaved into the [[#doom-modules][section on Doom modules]].

#+name: doom-literate
#+begin_src emacs-lisp :tangle no
literate
#+end_src


* Initial setup

This file should use lexical binding. Obviously.
This is the only sane default.
Also, apparently [[https://nullprogram.com/blog/2016/12/22/][it is (slightly) faster]].

#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src

The =packages.el= file shouldn't be byte compiled.

#+begin_src emacs-lisp :tangle packages.el
;;; packages.el -*- no-byte-compile: t; -*-
#+end_src

** Personal information

It's useful to have some basic personal information.

#+begin_src emacs-lisp
(setq user-full-name "Guilherme Grochau Azzi"
      user-mail-address "gazzi@babbel.com")
#+end_src


** Better defaults

The following is based on my previous configurations, [[https://tecosaur.github.io/emacs-config/config.html#rudimentary-configuration][tecosaur/emacs-config]] and [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#use-better-defaults][angrybacon/dotemacs]].


#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t         ; Delete files to trash instead of permanently
 window-combination-resize t         ; When resizing the frame, resize all windows (not just current)
 x-stretch-cursor t                  ; Stretch cursor to glyph width
 fill-column 90                      ; I like 90-char width lines
 indent-tabs-mode nil                ; Stop using tabs!
 tab-width 4                         ; Use 4-space indents by default (in some languages I override it)
 sentence-end-double-space t)        ; I like using double spaces after the end of a sentence


(setq auto-save-default t            ; Plase don't lose my work.
      truncate-string-ellipsis "…"   ; Unicode is cute and compact 😀
      scroll-margin 10)              ; Maintain a generous margin. As Tim Minchin illustrated nicely, context is important.

(global-subword-mode 1)              ; Navigate through camelCase and snake_case words

#+end_src

Besides that, since I am using Doom Emacs, I will take advantage of its nicer defaults.

#+name: doom-config
#+begin_src emacs-lisp :tangle no
(default +bindings +smartparens)
#+end_src


** Doom modules
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:CUSTOM_ID: doom-modules
:END:

Doom has a nice /modular configuration base/ providing great configuration defaults.
Using their [[https://github.com/hlissner/doom-emacs/blob/develop/docs/modules.org][existing modules]] saves me a lot of work.
For my own config, however, I'd rather use a monolithic but literate approach.

Doom modules are configured in the =init.el= file, whose structure is defined by the following code block.
The actual configuration is defined in the following subsections and weaved in.

#+name: init.el
#+attr_html: :collapsed t
#+begin_src emacs-lisp :tangle init.el :noweb no-export :comments no
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load in.
;; Press 'C-c c k' on a module to view its documentation,
;; and 'C-c c d' to browse its directory.


(doom! :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       <<doom-literate>>
       <<doom-config>>
       )
#+end_src

**** Interface

Emacs is okay.  Unless you use a lot of packages to improve the user experience.  Then it is great!

#+name: doom-completion
#+begin_src emacs-lisp
company             ; the ultimate code completion backend
;;helm              ; the *other* search engine for love and life
;;ido               ; the other *other* search engine...
;;ivy               ; a search engine for love and life
vertico             ; the search engine of the future
#+end_src

#+name: doom-ui
#+begin_src emacs-lisp
;;deft              ; notational velocity for Emacs
doom                ; what makes DOOM look the way it does
doom-dashboard      ; a nifty splash screen for Emacs
doom-quit           ; DOOM quit-message prompts when you quit Emacs
;;(emoji +unicode)  ; 🙂 = :)
hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;hydra             ; quick documentation for related commands
;;indent-guides     ; highlighted indent columns
ligatures           ; ligatures and symbols to make your code pretty again
;;minimap           ; show a map of the code on the side
modeline            ; snazzy, Atom-inspired modeline, plus API
nav-flash           ; blink cursor line after big motions
;;neotree           ; a project drawer, like NERDTree for vim
ophints             ; highlight the region an operation acts on
(popup              ; tame sudden yet inevitable temporary windows
 +all               ; ... all buffers whose name begins with an asterisk are popups
 +defaults)         ; ... use reasonable default rules
;;tabs              ; a tab bar for Emacs
treemacs            ; a project drawer, like neotree but cooler
;;unicode           ; extended unicode support for various languages ACHTUNG: freezes my emacs on NixOS!!!
(vc-gutter +pretty) ; vcs diff in the fringe
;;vi-tilde-fringe   ; fringe tildes to mark beyond EOB
;;window-select     ; visually switch windows
workspaces        ; tab emulation, persistence & separate workspaces
;;zen               ; distraction-free coding or writing
#+end_src

#+name: doom-editor
#+begin_src emacs-lisp
(evil +everywhere)  ; come to the dark side, we have cookies
file-templates      ; auto-snippets for empty files
fold                ; (nigh) universal code folding
format              ; automated prettiness from various sources
;;god               ; run Emacs commands without modifier keys
;;lispy             ; vim for lisp, for people who don't like vim
;;multiple-cursors  ; editing in many places at once, but only on evil
;;objed             ; text object editing for the innocent
;;parinfer          ; turn lisp into python, sort of
;;rotate-text       ; cycle region at point between text candidates
snippets            ; my elves. They type so I don't have to
word-wrap           ; soft wrapping with language-aware indent
#+end_src

#+name: doom-emacs
#+begin_src emacs-lisp
(dired +icons)    ; making dired pretty [functional]
electric          ; smarter, keyword-based electric-indent
(ibuffer +icons)  ; interactive buffer management
undo              ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree
#+end_src

#+name: doom-term
#+begin_src emacs-lisp
;;eshell            ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
vterm               ; the best terminal emulation in Emacs
#+end_src

#+name: doom-checkers
#+begin_src emacs-lisp
syntax              ; tasing you for every semicolon you forget
;(spell              ; tasing you for misspelling mispelling
; +hunspell          ; ... with morphological analysis and multiple languages
; +flyspell)         ; ... and the frontend that supports hunspell
;;grammar           ; tasing grammar mistake every you make
#+end_src

#+name: doom-tools
#+begin_src emacs-lisp
;;ansible
;;debugger          ; FIXME stepping through code, to help you add bugs
direnv              ; be direct about your environment
;;docker              ; port everything to containers
editorconfig        ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
;; (eval +overlay)     ; run code, run (also, repls)
;;gist              ; interacting with github gists
(lookup             ; navigate your code and its documentation
 +dictionary)       ; ... also lookup words on dictionary/thesaurus
lsp                 ; Language Server Protocol
magit               ; a git porcelain for Emacs
;; make                ; run make tasks from Emacs
;;pass              ; password manager for nerds
pdf                 ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
rgb                 ; creating color strings
;;taskrunner        ; taskrunner for all your projects
;;terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
;;upload            ; map local to remote projects via ssh/ftp
#+end_src

#+name: doom-os
#+begin_src emacs-lisp
(:if IS-MAC macos)    ; improve compatibility with macOS
tty                   ; improve the terminal Emacs experience
#+end_src


**** Language Support

Oh, he's a polyglot.
Well, since these are usually only loaded when an associated file is opened, might as well enable them.

#+name: doom-lang
#+begin_src emacs-lisp
;;(agda +local)           ; types of types of types of types...
;;beancount             ; mind the GAAP
;;cc                    ; C > C++ == 1
;;clojure               ; java with a lisp
;;common-lisp           ; if you've seen one lisp, you've seen them all
;;coq                   ; proofs-as-programs
;;crystal               ; ruby at the speed of c
;;csharp                ; unity, .NET, and mono shenanigans
data                    ; config/data formats
;;(dart +flutter)       ; paint ui and not much else
;;elixir                ; erlang done right
;;elm                   ; care for a cup of TEA?
emacs-lisp              ; drown in parentheses
;;erlang                ; an elegant language for a more civilized age
;;ess                   ; emacs speaks statistics
;;factor
;;faust                 ; dsp, but you get to keep your soul
;;fsharp                ; ML stands for Microsoft's Language
;;fstar                 ; (dependent) types and (monadic) effects and Z3
;;gdscript              ; the language you waited for
(go +lsp)               ; the hipster dialect
;;(haskell +lsp)        ; a language that's lazier than I am
;;hy                    ; readability of scheme w/ speed of python
;;idris                 ; a language you can depend on
json                    ; At least it ain't XML
;;(java +meghanada)     ; the poster child for carpal tunnel syndrome
(javascript +lsp)       ; all(hope(abandon(ye(who(enter(here))))))
;;(julia +lsp)          ; a better, faster MATLAB
;;kotlin                ; a better, slicker Java(Script)
;;(latex                ; writing papers in Emacs has never been so fun
;; +latexmk             ; ... compile properly
;; +cdlatex             ; ... quick maths symbols
;; +fold)               ; ... fold the clutter away!
;;lean                  ; for folks with too much to prove
;;ledger                ; be audit you can be
;;lua                   ; one-based indices? one-based indices
markdown                ; writing docs for people to ignore
;;nim                   ; python + lisp at the speed of c
(nix +lsp)              ; I hereby declare "nix geht mehr!"
;;ocaml                 ; an objective camel
(org                    ; organize your plain life in plain text
 +pretty)               ; ... with nice unicode symbols :D
;;php                   ; perl's insecure younger brother
plantuml                ; diagrams for confusing people more
;;purescript            ; javascript, but functional
;;(python +lsp +pyright)  ; beautiful is better than ugly
;;qt                    ; the 'cutest' gui framework ever
;;racket                ; a DSL for DSLs
;;raku                  ; the artist formerly known as perl6
;;rest                  ; Emacs as a REST client
;;rst                   ; ReST in peace
(ruby +rails)           ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
(rust +lsp)             ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala                 ; java, but good
;;scheme                ; a fully conniving family of lisps
sh                      ; she sells {ba,z,fi}sh shells on the C xor
;;sml
;;solidity              ; do you need a blockchain? No.
;;swift                 ; who asked for emoji variables?
;;terra                 ; Earth and Moon in alignment for performance.
web                     ; the tubes
yaml                    ; JSON, but readable
;;zig                   ; C, but simpler
#+end_src


**** Everything in Emacs

I don't do everything in Emacs.
But I could if I wanted to...

#+name: doom-email
#+begin_src emacs-lisp
;;(mu4e +gmail)
;;notmuch
;;(wanderlust +gmail)
#+end_src

#+name: doom-app
#+begin_src emacs-lisp
;;calendar
;;emms
;;everywhere        ; *leave* Emacs!? You must be joking
;;irc               ; how neckbeards socialize
;;(rss +org)        ; emacs as an RSS reader
;;twitter           ; twitter client https://twitter.com/vnought
#+end_src


* User interface

** Visual settings

*** Theme and modeline

Here I can set my preferred colour theme.

#+begin_src emacs-lisp
(setq doom-theme 'doom-molokai)
#+end_src

I hate the red file names in the modeline when the buffer has been modified and not saved.
Make it orange instead.

#+begin_src emacs-lisp
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "orange"))
#+end_src

*** Font faces

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 12)
      doom-big-font (font-spec :family "Fira Code" :size 25 :weight 'regular)

      ;doom-variable-pitch-font (font-spec :family "Fira Sans" :size 16 :weight 'light)
      ;doom-unicode-font (font-spec :family "Fira Code")
      ;doom-serif-font (font-spec :family "Noto Serif")
      )
#+end_src


** Keyboard

*** Better search

I like the evil keybindings for searching, but I want better search functions.

#+begin_src emacs-lisp
(map! :map evil-motion-state-map
      "/" #'consult-line
      "?" #'consult-line-multi)
#+end_src


** Frames, buffers and windows

*** Buffers

I could use some prettier buffer names.

#+begin_src emacs-lisp
(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name "► Doom")
#+end_src

**** TODO Improve buffer names when filename is the same but directory differs

*** Frame title

I'd like to have just the current buffer name, then if applicable the project folder.

#+begin_src emacs-lisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ?  buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ◉ %s" "  ●  %s") project-name))))))
#+end_src

