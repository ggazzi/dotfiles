#!/usr/bin/env bash
#
# Summary: Opens a project for development
#
# Usage: {cmd} [project]
# Options:
#   project (script): Name of the project as `owner/projectname`
#
# Changes into the project directory and opens a zellij session
# named after that project
#
# If a .config/zellij.kdl file exists in the project, it will be used to
# create the zellij session, otherwise a default session is created with an
# editor and a terminal window (the 'dev-utils' layout).

set -e

open_project() {
  local project="$1"

  # Extract last component for the name
  local name="${project##*/}"

  # Remove characters that can't appear in the zellij session name
  name="${name//./-}"

  # Truncate the name to avoid zellij hanging
  # See: https://github.com/zellij-org/zellij/issues/2591
  MAX_LEN=35
  if [ ${#name} -gt $MAX_LEN ]; then
    name="$(echo "$name" | head -c "$(( MAX_LEN - 1 ))")~"
  fi

  # Change into project directory
  cd "$WORKSPACE/$project"

  # Determine the approprate layout
  layout="$WORKSPACE/$project/.config/zellij.kdl"
  if ! [ -f "$layout" ]; then
    layout="dev-utils"
  fi

  # Create or attach to zellij session
  if zellij list-sessions -n | cut -d' ' -f1 | grep -q "^$name$"; then
    zellij attach "$name"
  else
    zellij --session "$name" && zellij --session "$name" --layout "$layout" # only applies layout to existing session
  fi
}

# Provide completions
if [ "$1" = "--complete" ]; then
  dev pj list
  exit 0
fi

declare -A args="($_DEV_ARGS)"

# Open specific project if it was given
if [ -n "${args[project]}" ]; then
  open_project "$1"
fi

# Let the user pick a project whenever zellij exits
while true; do
  project="$( \
    dev pj list \
    | fzf --reverse --prompt "Pick a project: " --header "Press ESC to exit" \
  )"

  open_project "$project"
done
